// <auto-generated />
using System;
using Marvel.IDP.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Marvel.IDP.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20230415213209_update-external-login")]
    partial class updateexternallogin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Marvel.IDP.Entities.ExternalLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProviderSubjectId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalLogins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f41b3b76-9338-4564-a92e-1de542c499de"),
                            ConcurrencyStamp = "50f227b5-62fd-426b-b21a-790468ad59d7",
                            ProviderName = "AAD",
                            ProviderSubjectId = "3QpPcpy8e6AgExZkiSembDW5U_ITlo8raKLLLZzbsVE",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972")
                        },
                        new
                        {
                            Id = new Guid("0c29cc6f-025d-4112-8080-0f31c0fff5f8"),
                            ConcurrencyStamp = "84d0696b-2c17-4064-aa32-a5b96c74513e",
                            ProviderName = "Facebook",
                            ProviderSubjectId = "4254533717911644",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972")
                        });
                });

            modelBuilder.Entity("Marvel.IDP.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Active = true,
                            ConcurrencyStamp = "3814ddf8-fbf5-47d3-935e-37ef6a3235dc",
                            Password = "password",
                            Subject = "d860efca-22d9-47fd-8249-791ba61b07c7",
                            UserName = "David"
                        },
                        new
                        {
                            Id = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Active = true,
                            ConcurrencyStamp = "e297d6f3-e4d0-4f31-a0b7-0e487072258a",
                            Password = "password",
                            Subject = "b7539694-97e7-4dfe-84da-b4256e1ff5c7",
                            UserName = "Emma"
                        },
                        new
                        {
                            Id = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Active = true,
                            ConcurrencyStamp = "059d3d89-01d8-459f-ae5d-4c55bdc9b79c",
                            Password = "",
                            Subject = "mx001",
                            UserName = "alice"
                        },
                        new
                        {
                            Id = new Guid("33229d33-99e0-41b3-b18d-4f72127e3973"),
                            Active = true,
                            ConcurrencyStamp = "536a2ac8-3487-46b9-9ba9-d7bf41fc066d",
                            Password = "",
                            Subject = "mx002",
                            UserName = "bob"
                        },
                        new
                        {
                            Id = new Guid("43229d33-99e0-41b3-b18d-4f72127e3974"),
                            Active = true,
                            ConcurrencyStamp = "81484745-e53e-45bf-b550-1c1dc641ed5d",
                            Password = "",
                            Subject = "mx003",
                            UserName = "dave"
                        },
                        new
                        {
                            Id = new Guid("53229d33-99e0-41b3-b18d-4f72127e3975"),
                            Active = true,
                            ConcurrencyStamp = "938848d8-3a03-4ab4-baf0-a757586b4e00",
                            Password = "",
                            Subject = "mx004",
                            UserName = "amos"
                        });
                });

            modelBuilder.Entity("Marvel.IDP.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2dff6a57-3621-48e7-b4ee-415a5abfb24e"),
                            ConcurrencyStamp = "dc177b86-4e90-4e2f-a773-ae3fcc9f51d0",
                            Type = "given_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "David"
                        },
                        new
                        {
                            Id = new Guid("c5d814ee-8e1d-4139-9e61-e13f327fd95d"),
                            ConcurrencyStamp = "bc88c7f7-c73a-4c70-9978-ede74852f86f",
                            Type = "family_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("5477d615-a9bf-469b-abf6-1a1f49330a41"),
                            ConcurrencyStamp = "adf0c708-61bb-42d7-87bc-7fcef9447160",
                            Type = "country",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "nl"
                        },
                        new
                        {
                            Id = new Guid("4a053c76-d216-4692-8723-e909e9f35ccb"),
                            ConcurrencyStamp = "bea0fe2e-738f-431b-83b3-ea1ee0ffe782",
                            Type = "role",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "FreeUser"
                        },
                        new
                        {
                            Id = new Guid("282f44a4-cd34-4ad1-8fbc-f01a3f1d04f0"),
                            ConcurrencyStamp = "3fcc7450-5672-462b-bd16-249f911c9765",
                            Type = "given_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Emma"
                        },
                        new
                        {
                            Id = new Guid("966cbd3d-9635-45c1-890f-05885bf3f1a8"),
                            ConcurrencyStamp = "f369f754-911a-4c9e-9fcb-9432e991fd93",
                            Type = "family_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("eb186406-3ee9-492e-9b66-eef1e530c3df"),
                            ConcurrencyStamp = "0ed4afdd-a82c-4b72-a3a3-c552c0a39535",
                            Type = "country",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "be"
                        },
                        new
                        {
                            Id = new Guid("12054669-6a45-4315-a712-5564cd5f128f"),
                            ConcurrencyStamp = "1cfa6df8-ca03-4dff-a379-d59607d8ff34",
                            Type = "role",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "PayingUser"
                        },
                        new
                        {
                            Id = new Guid("0a74d6a5-1e28-4b93-8a31-29bdbe39440b"),
                            ConcurrencyStamp = "1127e200-866e-445c-9332-2a44badd9a5f",
                            Type = "name",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "Alice Smith"
                        },
                        new
                        {
                            Id = new Guid("3ddeddd2-4ffe-4298-9709-e9cd687c9034"),
                            ConcurrencyStamp = "ede46112-8b04-41a6-8a5b-ac68ec393043",
                            Type = "given_name",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "Alice"
                        },
                        new
                        {
                            Id = new Guid("0701e048-8c18-4fa4-9c8e-ee8641c2095a"),
                            ConcurrencyStamp = "dac75c38-c8c9-450d-bb11-53683fe3cfa7",
                            Type = "family_name",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "Smith"
                        },
                        new
                        {
                            Id = new Guid("93c91e2f-826c-4c92-aa3d-e875bc96eb7d"),
                            ConcurrencyStamp = "612d31ee-d379-4508-8a8b-b0ac6ce451d7",
                            Type = "email",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "AliceSmith@email.com"
                        },
                        new
                        {
                            Id = new Guid("1da33f07-670f-4268-b20e-97c77911e765"),
                            ConcurrencyStamp = "23c8cf9d-02e6-4687-b730-fd051d917eb8",
                            Type = "email_verified",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "true"
                        },
                        new
                        {
                            Id = new Guid("e5e77b85-8ff6-441e-9148-4e0fc6d45604"),
                            ConcurrencyStamp = "c8870c2e-0b76-4923-8060-8b3e34135d1d",
                            Type = "website",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "http://alice.com"
                        },
                        new
                        {
                            Id = new Guid("0a249158-b1b1-4d0e-aa33-ac117e4f939a"),
                            ConcurrencyStamp = "8b8f2625-89c2-43c9-9f53-fb497227a3a4",
                            Type = "address",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = ""
                        },
                        new
                        {
                            Id = new Guid("7b7f31a4-f341-4033-bdad-6afdac7c100d"),
                            ConcurrencyStamp = "a682742b-c113-4c86-be65-0bbb536cf353",
                            Type = "employee_classification",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "B10"
                        },
                        new
                        {
                            Id = new Guid("0bb12446-c8e3-44a1-92f3-7c1998d8b131"),
                            ConcurrencyStamp = "45347489-ca4a-4a9d-8f97-7decc90cb126",
                            Type = "birthdate",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "1988-10-14"
                        },
                        new
                        {
                            Id = new Guid("2b331a4c-fb91-4479-803c-11ae5793f268"),
                            ConcurrencyStamp = "16159709-f31d-417b-8842-451ed948950e",
                            Type = "nationality",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "British"
                        },
                        new
                        {
                            Id = new Guid("bc9ac5f8-a22d-4326-821b-3f9bbeff00eb"),
                            ConcurrencyStamp = "d287a65f-290a-492c-97d7-164a3c3ad457",
                            Type = "acl",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "toronto_au"
                        },
                        new
                        {
                            Id = new Guid("d7f653ee-ba2c-4ca8-979d-2a912bc508e9"),
                            ConcurrencyStamp = "6c617c8d-a80e-4a2a-aece-3154cce03f5d",
                            Type = "acl",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "public_market"
                        },
                        new
                        {
                            Id = new Guid("e190e6d6-455a-43e5-8b03-85266f9c9659"),
                            ConcurrencyStamp = "1f2dcbb9-3409-4f3a-8bb6-e8974134e334",
                            Type = "acl",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "auth_demo_dev"
                        },
                        new
                        {
                            Id = new Guid("a7c81d30-3398-418b-bb0f-1b9d1b4b3a60"),
                            ConcurrencyStamp = "2f38d5b1-99dc-4e1f-ab6f-3b780ade68e8",
                            Type = "acl",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "auth_demo_tester"
                        });
                });

            modelBuilder.Entity("Marvel.IDP.Entities.ExternalLogin", b =>
                {
                    b.HasOne("Marvel.IDP.Entities.User", "User")
                        .WithMany("ExternalLogin")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marvel.IDP.Entities.UserClaim", b =>
                {
                    b.HasOne("Marvel.IDP.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marvel.IDP.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("ExternalLogin");
                });
#pragma warning restore 612, 618
        }
    }
}
