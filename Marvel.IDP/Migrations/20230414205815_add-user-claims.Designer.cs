// <auto-generated />
using System;
using Marvel.IDP.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Marvel.IDP.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20230414205815_add-user-claims")]
    partial class adduserclaims
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Marvel.IDP.Entities.ExternalLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProviderSubjectId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalLogins");
                });

            modelBuilder.Entity("Marvel.IDP.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Active = true,
                            ConcurrencyStamp = "31b39c8a-4c0e-4302-ae40-630184cf56b4",
                            Password = "password",
                            Subject = "d860efca-22d9-47fd-8249-791ba61b07c7",
                            UserName = "David"
                        },
                        new
                        {
                            Id = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Active = true,
                            ConcurrencyStamp = "16221cce-668f-4b65-bb94-e6353d459d01",
                            Password = "password",
                            Subject = "b7539694-97e7-4dfe-84da-b4256e1ff5c7",
                            UserName = "Emma"
                        },
                        new
                        {
                            Id = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Active = true,
                            ConcurrencyStamp = "4c7011c7-5830-4909-b8df-262901837df0",
                            Password = "",
                            Subject = "mx001",
                            UserName = "alice"
                        },
                        new
                        {
                            Id = new Guid("33229d33-99e0-41b3-b18d-4f72127e3973"),
                            Active = true,
                            ConcurrencyStamp = "6bcf7420-a76f-4ded-86bc-da006e6b9591",
                            Password = "",
                            Subject = "mx002",
                            UserName = "bob"
                        },
                        new
                        {
                            Id = new Guid("43229d33-99e0-41b3-b18d-4f72127e3974"),
                            Active = true,
                            ConcurrencyStamp = "b78a319e-019b-4531-9a0e-58707f518c8d",
                            Password = "",
                            Subject = "mx003",
                            UserName = "dave"
                        },
                        new
                        {
                            Id = new Guid("53229d33-99e0-41b3-b18d-4f72127e3975"),
                            Active = true,
                            ConcurrencyStamp = "244c23cc-c6c1-4d87-a155-355b4cf7b40f",
                            Password = "",
                            Subject = "mx004",
                            UserName = "amos"
                        });
                });

            modelBuilder.Entity("Marvel.IDP.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf1a7b30-9860-4d27-86bf-5cf7724edf1a"),
                            ConcurrencyStamp = "27df3740-b2b0-456f-b431-315d25306274",
                            Type = "given_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "David"
                        },
                        new
                        {
                            Id = new Guid("4fca29fb-4832-4f09-aa95-24a04198fbde"),
                            ConcurrencyStamp = "e076aede-68de-4a08-a406-3756ac276aff",
                            Type = "family_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("09c20db4-8cf0-4c3d-a795-d4b412ed2bf9"),
                            ConcurrencyStamp = "62778c9f-839e-41a4-a05b-510a8fc284d6",
                            Type = "country",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "nl"
                        },
                        new
                        {
                            Id = new Guid("f335a108-3b1a-47e3-bd8c-709b18815c7e"),
                            ConcurrencyStamp = "4c7e325f-ab70-4673-a0e1-000efffa5c39",
                            Type = "role",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "FreeUser"
                        },
                        new
                        {
                            Id = new Guid("3e59d568-b141-4593-b0ec-f9966c3e7ce1"),
                            ConcurrencyStamp = "dcba92ea-bb53-44ba-8756-465dd7f9cc3e",
                            Type = "given_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Emma"
                        },
                        new
                        {
                            Id = new Guid("7079f23b-d72e-4c5a-9d7c-744141e4b39d"),
                            ConcurrencyStamp = "487aa4cc-9a8c-4959-b1bd-3141c2414a3f",
                            Type = "family_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("397e2a95-7980-46a0-babc-69a5cb8043e5"),
                            ConcurrencyStamp = "b172da13-14fc-40df-a629-f59e2b734852",
                            Type = "country",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "be"
                        },
                        new
                        {
                            Id = new Guid("c954e3db-7303-4e7d-bb1b-6258add1a8d5"),
                            ConcurrencyStamp = "286f0edf-f6e5-4b19-a52d-c9578f12d634",
                            Type = "role",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "PayingUser"
                        },
                        new
                        {
                            Id = new Guid("af36df1c-21d1-484c-b83b-ea9020fdd4fd"),
                            ConcurrencyStamp = "acf5dd9d-c5a7-4d81-9d87-e79b217b266e",
                            Type = "name",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "Alice Smith"
                        },
                        new
                        {
                            Id = new Guid("564f3ab0-c40b-4d49-81db-7379111f3dcb"),
                            ConcurrencyStamp = "4c3ac20a-683e-4df1-aa16-ae4321e3570e",
                            Type = "given_name",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "Alice"
                        },
                        new
                        {
                            Id = new Guid("0691f068-913b-4f0c-a3b6-a10bb8797b4b"),
                            ConcurrencyStamp = "81a1ec97-0d18-4038-9ba2-41bc6f1c3c78",
                            Type = "family_name",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "Smith"
                        },
                        new
                        {
                            Id = new Guid("e74b57c8-1ee8-43f4-8271-fc9c7c4b2c52"),
                            ConcurrencyStamp = "38716664-dafa-48a3-8d4c-c5b961d518ce",
                            Type = "email",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "AliceSmith@email.com"
                        },
                        new
                        {
                            Id = new Guid("6031ba20-da05-4bd3-b956-bedcce885636"),
                            ConcurrencyStamp = "aa581178-eac5-48a5-aee4-bc29b5927472",
                            Type = "email_verified",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "true"
                        },
                        new
                        {
                            Id = new Guid("518a4883-eebc-4030-af6c-ad86d18a547c"),
                            ConcurrencyStamp = "14b0a144-2a12-4e32-87bd-a9d70e9fbdd6",
                            Type = "website",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "http://alice.com"
                        },
                        new
                        {
                            Id = new Guid("0c736eaa-3738-4df6-8095-e7b28e43d05c"),
                            ConcurrencyStamp = "6340629a-cc87-4df1-8513-0a4f57c6ae65",
                            Type = "address",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = ""
                        },
                        new
                        {
                            Id = new Guid("6c634e64-3479-46f4-b92b-fbb2cb873dc5"),
                            ConcurrencyStamp = "6dd6da31-0e39-4351-ae44-6c9ca9df83bd",
                            Type = "employee_classification",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "B10"
                        },
                        new
                        {
                            Id = new Guid("45cca771-70d4-4dd1-8f67-eb8d101e261a"),
                            ConcurrencyStamp = "5af7f50d-6e28-4648-b1b4-6e830b09d0c6",
                            Type = "birthdate",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "1988-10-14"
                        },
                        new
                        {
                            Id = new Guid("4b367b89-a354-417a-adbf-39653a2fe6a6"),
                            ConcurrencyStamp = "7de29270-9e0e-4225-93ea-2970b8732c43",
                            Type = "nationality",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "British"
                        },
                        new
                        {
                            Id = new Guid("12107986-4503-4ead-aed8-004d4a0bde4d"),
                            ConcurrencyStamp = "dfc7155e-2cc6-4251-9842-d14bcd9955a3",
                            Type = "acl",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "toronto_au"
                        },
                        new
                        {
                            Id = new Guid("b49dc3c6-e229-4c7d-8172-ffa43fca7f55"),
                            ConcurrencyStamp = "f1e1a880-9823-45f0-929d-a7bf4264b26c",
                            Type = "acl",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "public_market"
                        },
                        new
                        {
                            Id = new Guid("8483d98a-3af1-49de-9053-4320b9bea865"),
                            ConcurrencyStamp = "977286bd-86b3-49cf-88f7-6ee0c9349363",
                            Type = "acl",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "auth_demo_dev"
                        },
                        new
                        {
                            Id = new Guid("dcad780d-1e2d-4f7f-9ee5-ddc8210b3fe8"),
                            ConcurrencyStamp = "9a21890e-3275-42b1-a740-8058df22fe4c",
                            Type = "acl",
                            UserId = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Value = "auth_demo_tester"
                        });
                });

            modelBuilder.Entity("Marvel.IDP.Entities.ExternalLogin", b =>
                {
                    b.HasOne("Marvel.IDP.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marvel.IDP.Entities.UserClaim", b =>
                {
                    b.HasOne("Marvel.IDP.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marvel.IDP.Entities.User", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
