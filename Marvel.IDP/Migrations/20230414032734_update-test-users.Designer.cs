// <auto-generated />
using System;
using Marvel.IDP.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Marvel.IDP.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20230414032734_update-test-users")]
    partial class updatetestusers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Marvel.IDP.Entities.ExternalLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProviderSubjectId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalLogins");
                });

            modelBuilder.Entity("Marvel.IDP.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Active = true,
                            ConcurrencyStamp = "04351399-1b19-4933-a260-82c187a14d92",
                            Password = "password",
                            Subject = "d860efca-22d9-47fd-8249-791ba61b07c7",
                            UserName = "David"
                        },
                        new
                        {
                            Id = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Active = true,
                            ConcurrencyStamp = "5600f81c-f6cc-4ca2-bdd3-985217667452",
                            Password = "password",
                            Subject = "b7539694-97e7-4dfe-84da-b4256e1ff5c7",
                            UserName = "Emma"
                        },
                        new
                        {
                            Id = new Guid("23229d33-99e0-41b3-b18d-4f72127e3972"),
                            Active = true,
                            ConcurrencyStamp = "86b33926-72a8-41fa-978f-0b0a1368aac1",
                            Password = "",
                            Subject = "mx001",
                            UserName = "alice"
                        },
                        new
                        {
                            Id = new Guid("33229d33-99e0-41b3-b18d-4f72127e3973"),
                            Active = true,
                            ConcurrencyStamp = "852367e5-34a5-423b-92d5-adc915322410",
                            Password = "",
                            Subject = "mx002",
                            UserName = "bob"
                        },
                        new
                        {
                            Id = new Guid("43229d33-99e0-41b3-b18d-4f72127e3974"),
                            Active = true,
                            ConcurrencyStamp = "186b0d81-ce36-44bf-bf6d-a7b3a63efee3",
                            Password = "",
                            Subject = "mx003",
                            UserName = "dave"
                        },
                        new
                        {
                            Id = new Guid("53229d33-99e0-41b3-b18d-4f72127e3975"),
                            Active = true,
                            ConcurrencyStamp = "8df05d1b-72f2-4eec-a39f-b1a513781152",
                            Password = "",
                            Subject = "mx004",
                            UserName = "amos"
                        });
                });

            modelBuilder.Entity("Marvel.IDP.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53b01c7d-d1b1-47a2-b58d-8fe9b77c5bd6"),
                            ConcurrencyStamp = "99110d24-b57f-4e2a-bec0-c7dd54a76963",
                            Type = "given_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "David"
                        },
                        new
                        {
                            Id = new Guid("89792456-0488-4ac8-9750-4e6ff4a5ccda"),
                            ConcurrencyStamp = "cfabb397-97e6-42d8-8124-c886eb2c2022",
                            Type = "family_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("4bc93cda-0e28-4ed1-8aa5-414d470100aa"),
                            ConcurrencyStamp = "39708d4d-d1de-44f2-9353-0889268e9366",
                            Type = "country",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "nl"
                        },
                        new
                        {
                            Id = new Guid("e12d32b7-1aa2-4cc5-8b62-54dac819e688"),
                            ConcurrencyStamp = "21518834-290f-4efc-80bf-d9121fecec76",
                            Type = "role",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "FreeUser"
                        },
                        new
                        {
                            Id = new Guid("0b28af70-aa59-4fa1-9e7c-eef38f60712f"),
                            ConcurrencyStamp = "1eeb33d0-e50e-4bae-9eaf-8f2cd101cc26",
                            Type = "given_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Emma"
                        },
                        new
                        {
                            Id = new Guid("14178f66-75b1-4a79-89a8-ac2e3f227d91"),
                            ConcurrencyStamp = "eaea0d4a-39ab-4648-9709-4a08abc54280",
                            Type = "family_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("fbcc0e6d-0fad-4bfd-9ca4-6a21f0b64331"),
                            ConcurrencyStamp = "75afcc20-ecb4-497f-9e35-a48ab5eb2f1b",
                            Type = "country",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "be"
                        },
                        new
                        {
                            Id = new Guid("4e929b49-2134-4ed3-bd04-46305f0646e2"),
                            ConcurrencyStamp = "b061662c-dab6-4987-b333-a861092b8f3a",
                            Type = "role",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "PayingUser"
                        });
                });

            modelBuilder.Entity("Marvel.IDP.Entities.ExternalLogin", b =>
                {
                    b.HasOne("Marvel.IDP.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marvel.IDP.Entities.UserClaim", b =>
                {
                    b.HasOne("Marvel.IDP.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marvel.IDP.Entities.User", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
