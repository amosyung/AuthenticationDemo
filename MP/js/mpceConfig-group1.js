//-------------------------------------------------------------------------------------------------
// mpceConfig-group1.js
//
// Copyright (C) 2022 Mercer LLC, All Rights Reserved.
//
// This file contains the principal configuration for a given Medical Plan Cost Estimator (MPCE).
// This configuration is intended to contain client-specific customization to drive the generic
// MPCE engine in a data-driven fashion, permitting it to be maintained as common across clients.
// Briefly, the MPCE configuration object describes:
//
//     * (Geographic) REGIONS, e.g. states, other regions, location, etc.
//     * (Medical) PLANS, e.g. PPO, HMO, HDHP plans, in- and out-of-network plan variants, etc.
//     * (Employee) STATUSES, e.g. full-time, part-time, retired, etc.
//     * COVERAGE LEVELS, e.g. employee, employee + children, employee + spouse/DP, family, etc.
//     * (Medical) SERVICES, e.g. doctor visit, hospital stay, 30-day drug prescription, etc.
//     * CATEGORIES (of services), e.g. medical services, drugs, preventive, etc.
//     * HEALTH STATUSES, bundling a set of services, e.g. low user, moderate user, high user, etc.
//
// For more detail, please refer to the sections below.
//

define([], function module() {
"use strict";

let config = {};

//-------------------------------------------------------------------------------------------------
// configId: An optional string that distinguishes this MPCE subconfig file from other potential
//   subconfig files within the same client site implementation. If used, in practice this value
//   ought to reflect the subconfigId declared in mainConfig.js, if any.
//
config.configId = "group1";

//-------------------------------------------------------------------------------------------------
// regions: Defines the regions (e.g. locations, states, or otherwise) included in the MPCE.
//
// Structure: Object mapping string region ids, each to an object containing properties as follows:
//
// - description: Required string property containing the region name suitable for display.
// - plans: Required array property containing the valid plan ids for the region, each of which
//     must be defined in a subconfig's config.plans.
//
config.regions = {
	"G1": {
		description: "Group1",
		plans: ["SAMPLE_HSA1", "SAMPLE_HSA2", "SAMPLE_PPO", "SAMPLE_HMO"]
	}
};

//-------------------------------------------------------------------------------------------------
// regionsOrder: An array defining the order in which regions are to be displayed and/or iterated
//   over. The set of region ids listed must match the set defined in mainConfig.regions.
//   regionsDefaultId permits specifying the default value for region when the tool loads.
//
config.regionsOrder = ["G1"];
config.regionsDefaultId = "G1";

//-------------------------------------------------------------------------------------------------
// plans: Defines the plans included in the MPCE. Plans have a description, deductible and
//   out-of-pocket-maximum either per person and/or family, and optional HSA/HRA base fund amounts
//   built into the plan.
//
// Structure: Object mapping string plan ids, each to an object containing properties as follows:
//
// - description: Required string property containing the plan name suitable for display.
// - descriptionChart: Optional description that, when present, is used in the results chart.
// - descriptionTable: Optional description that, when present, is used in the results table.
// - descriptionSelect: Optional description that, when present, is used in select dropdowns.
// - descriptionPlanProvisions: Optional description that, when present, is used in the plan
//     provisions table.
// - deductiblesDescription: Optional text describing the deductibles, to be used in the plan
//     provisions table instead of any description generated by the tool. In some cases, where
//     the defined deductibles have an atypical structure, this becomes required.
// - personDeductibles: Optional object describing plan per-person deductibles; see below*.
// - familyDeductibles: Optional object describing plan family deductibles; see below*.
// - outOfPocketMaximumsDescription: Optional text describing the out-of-pocket maximums, to be used
//     in the plan provisions table instead of any description generated by the tool. In some cases,
//     where the defined out-of-pocket maximums have an atypical structure, this becomes required.
// - personOutOfPocketMaximums: Optional object describing plan per-person OOP maximums; see below*.
// - familyOutOfPocketMaximums: Optional object describing plan family OOP maximums; see below*.
// - fundAmountsDescription: Optional text describing the company fund amounts for the plan, to be
//     used in the plan provisions table instead of any description generated by the tool. In some
//     cases, where the defined amounts have an atypical structure, this becomes required.
// - fundAmountMap: Optional object mapping a coverage level id string to a fund amount included
//     in the plan. If plan has a fund, the fund can be drawn down first to cover all or only
//     certain categories of expenses. You could also map first to region ids or status ids then
//     to coverage level ids to amounts (if for some reason you would like to use different amounts
//     according to region or status.)
// - restrictedFundAmountMap: Optional object mapping a coverage level id string to a fund amount
//     included in the plan. However, unlike fundAmountMap, funds specified here can be subject to
//     tighter restrictions; see categoriesFundEligibility for how this works.
// - categoriesFundEligibility: Optional object mapping a category id to a string. The accepted string
//     values are one of "noFunds", "allFunds", or "nonRestrictedFunds". The default for a category
//     if not specified is "noFunds". Otherwise, "allFunds" means both regular and restricted funds
//     may be applied to the category, while "nonRestrictedFunds" means only regular funds (which
//     includes optional contributions and any match) may apply to the category. e.g. If company
//     HRA money specified via restrictedFundMap cannot be used to specifically cover drugs, an
//     entry here could be "drugs": "nonRestrictedFunds".
// - fundAllowsContributions: Optional boolean indicating whether the associated savings account
//     fund allows contributions, or not. If specified, then an fsaeAccountTypeId is needed, too.
// - fundContributionsHaveMatch: Optional boolean indicating whether the fund has a corresponding
//     company match. If true, the tool will call the FSAE engine to calculate the match and display
//     it in the results. The first (or only) account type id configuration specified within
//     fsaeAccountTypeId is assumed to specify the account type having the company match.
// - fundMatchDescription: Optional text describing the company fund matching for the plan, to be
//     used in the plan provisions table instead of any description generated by the tool. In some
//     cases, where the match amount is based on custom logic, this should be explicitly set.
// - fsaeAccountTypeId: Optional string describing which kind of tax savings vehicle(s) this plan
//     is associated with. Typically one of "HSA+LPFSA", "HSA", "FSA", or "LPFSA", but the
//     permitted values depend on the FSAE config. Always specify any kind with a match first.
// - costsObjectId: Optional string property providing the name of the service costs object. This
//     string must begin with "costs_". For example, "costs_PPO_IN". By default, the costs for a
//     service (see services description) will be contained in a property named "costs", but that
//     can be overridden per-plan by specifying a costsObjectId property in a plan here.
// - noTaxCalculator: Optional boolean, defaulting to false if undefined. If true, the plan will be
//     excluded as a choice for use in the tax calculator part of the tool. Note that the plan may
//     still have an associated fsaeAccountTypeId for contribution and match purposes.
// - excludeFromTable: Optional boolean, defaulting to false if undefined. If true, a column for the
//     plan will not be included in the savings account results table.
//
// * On deductibles: Each of the deductibles objects referred to above must contain at least an
// object named "general". Additional named objects may be created as needed and must specify a
// "categories" array property indicating the category ids the object applies to. Furthermore, each
// object can then contain either a single "amount" number property or an "amountMap" object property
// which would map coverage level ids to amounts. You could also map first to region ids or status
// ids then to coverage level ids to amounts, e.g. for different amounts according to region/status.
//
// ** On out-of-pocket maximums: Each of the out-of-pocket maximum objects referred to above must
// contain at least one named object, and each must specify a "categories" property indicating at
// least one category the object applies to. Each named object must also contain an "amount" or
// "amountMap" following the same rules as for a deductibles "amountMap" object, above. Each named
// object may optionally have a "chargeTypes" property, to limit the kinds of charges the maximum
// applies to: one or more of "deductible", "copay", or "coinsurance". Last, every possible category
// id must be mentioned in at least one of a plan's OOP maximum objects, whether person or family.
//
// While plan configuration can be complex, there is sufficient flexibility to enable, say, a
// plan where there are separate drug deductibles and out-of-pocket maximums, etc. Furthermore,
// a plan could use only per-person deductibles/maximums, family deductibles/maximums, or both.
//
config.plans = {
	"SAMPLE_HSA1": {
		description: "Health Savings Account Plan",
		descriptionChart: "HSA Plan",
		descriptionTable: "HSA&nbsp;Plan",
		familyDeductibles: {
			"general": {
				amountMap: {
					"employeeOnly": 1500,
					"employeeAndSpouse": 3000,
					"employeeAndChild": 3000,
					"employeeAndChildren": 3000,
					"employeeAndFamily": 3000
				}
			}
		},
		outOfPocketMaximumsDescription:
			"<i>Overall:</i><br>$6,000 individual&nbsp;/<br>$9,500 family<br><small>($9,100 max per person)</small><br><br>" +
			"<i>Drug charges:</i><br>$2,000 per individual,<br>$5,000 family maximum",
		personOutOfPocketMaximums: {
			"personOverallMax": {
				categories: ["outpatient", "inpatient", "drugs"],
				amount: 9450 // ACA individual limit as of 2024
			},
			"personDrugMax": {
				categories: ["drugs"],
				amount: 2000
			}
		},
		familyOutOfPocketMaximums: {
			"familyOverallMax": {
				categories: ["outpatient", "inpatient", "drugs"],
				amountMap: {
					"employeeOnly": 6000,
					"employeeAndSpouse": 9500,
					"employeeAndChild": 9500,
					"employeeAndChildren": 9500,
					"employeeAndFamily": 9500
				}
			},
			"familyDrugMax": {
				categories: ["drugs"],
				amount: 5000
			}
		},
		fundAmountsDescription: "$1,250 individual&nbsp;/<br>$2,250 family",
		fundAmountMap: {
			"employeeOnly": 1250,
			"employeeAndSpouse": 2250,
			"employeeAndChild": 2250,
			"employeeAndChildren": 2250,
			"employeeAndFamily": 2250
		},
		categoriesFundEligibility: {
			"outpatient": "allFunds",
			"inpatient": "allFunds",
			"drugs": "allFunds"
		},
		fundAllowsContributions: true,
		fsaeAccountTypeId: "HSA"
	},

	"SAMPLE_HSA2": {
		description: "Matched Health Savings Account Plan",
		descriptionChart: "Matched<br>HSA Plan",
		descriptionTable: "Matched<br>HSA&nbsp;Plan",
		familyDeductibles: {
			"general": {
				amountMap: {
					"employeeOnly": 1500,
					"employeeAndSpouse": 3000,
					"employeeAndChild": 3000,
					"employeeAndChildren": 3000,
					"employeeAndFamily": 3000
				}
			}
		},
		outOfPocketMaximumsDescription:
			"<i>Overall:</i><br>$6,000 individual&nbsp;/<br>$9,500 family<br><small>($9,100 max per person)</small><br><br>" +
			"<i>Drug charges:</i><br>$2,000 per individual<br>$5,000 family maximum",
		personOutOfPocketMaximums: {
			"personOverallMax": {
				categories: ["outpatient", "inpatient", "drugs"],
				amount: 9450 // ACA individual limit as of 2024
			},
			"personDrugMax": {
				categories: ["drugs"],
				amount: 2000
			}
		},
		familyOutOfPocketMaximums: {
			"familyOverallMax": {
				categories: ["outpatient", "inpatient", "drugs"],
				amountMap: {
					"employeeOnly": 6000,
					"employeeAndSpouse": 9500,
					"employeeAndChild": 9500,
					"employeeAndChildren": 9500,
					"employeeAndFamily": 9500
				}
			},
			"familyDrugMax": {
				categories: ["drugs"],
				amount: 5000
			}
		},
		categoriesFundEligibility: {
			"outpatient": "allFunds",
			"inpatient": "allFunds",
			"drugs": "allFunds"
		},
		fundAllowsContributions: true,
		fundContributionsHaveMatch: true,
		fundMatchDescription: "100% match up to<br>$1250 individual&nbsp;/<br>$1750 family",
		fsaeAccountTypeId: "HSA_MATCHED"
	},

	"SAMPLE_PPO": {
		description: "PPO (with FSA)",
		descriptionChart: "PPO<br>(with FSA)",
		descriptionTable: "PPO<br>(w/&nbsp;FSA)",
		personDeductibles: {
			"general": { amount: 750 }
		},
		familyDeductibles: {
			"general": { amount: 1500 }
		},
		outOfPocketMaximumsDescription:
			"<i>Medical charges:</i><br>$4,000 per individual,<br>$7,500 family maximum<br><br>" +
			"<i>Drug charges:</i><br>$1,500 per individual,<br>$6,000 family maximum",
		personOutOfPocketMaximums: {
			"personMedicalMax": {
				categories: ["outpatient", "inpatient"],
				amount: 4000
			},
			"personDrugMax": {
				categories: ["drugs"],
				amount: 1500
			}
		},
		familyOutOfPocketMaximums: {
			"familyMedicalMax": {
				categories: ["outpatient", "inpatient"],
				amount: 7500
			},
			"familyDrugsMax": {
				categories: ["drugs"],
				amountMap: {
					"employeeOnly": 1500,
					"employeeAndSpouse": 3000,
					"employeeAndChild": 3000,
					"employeeAndChildren": 6000,
					"employeeAndFamily": 6000
				}
			}
		},
		fundAmountsDescription: "$250 individual&nbsp;/<br>$500 family",
		restrictedFundAmountMap: {
			"employeeOnly": 250,
			"employeeAndSpouse": 500,
			"employeeAndChild": 500,
			"employeeAndChildren": 500,
			"employeeAndFamily": 500
		},
		fundAmountMap: {
			"employeeOnly": 0,
			"employeeAndSpouse": 0,
			"employeeAndChild": 0,
			"employeeAndChildren": 0,
			"employeeAndFamily": 0
		},
		categoriesFundEligibility: {
			"outpatient": "allFunds",
			"inpatient": "allFunds",
			"drugs": "nonRestrictedFunds"
		},
		fundAllowsContributions: true,
		fsaeAccountTypeId: "FSA"
	},

	"SAMPLE_HMO": {
		description: "HMO (with FSA)",
		descriptionChart: "HMO<br>(with FSA)",
		descriptionTable: "HMO<br>(w/&nbsp;FSA)",
		personDeductibles: {
			"general": { amount: 500 }
		},
		familyDeductibles: {
			"general": { amount: 1000 }
		},
		outOfPocketMaximumsDescription:
			"<i>Overall:</i><br>$3,000 individual*&nbsp;/<br>$6,000 family<br><br>" +
			"<div class='small'>* Coinsurance charges not to<br>exceed $2,000 per individual</div>",
		personOutOfPocketMaximums: {
			"personMedicalCoinsuranceMax": {
				categories: ["outpatient", "inpatient"],
				chargeTypes: ["coinsurance"],
				amount: 2000
			},
			"personOverallMax": {
				categories: ["outpatient", "inpatient", "drugs"],
				amount: 3000
			}
		},
		familyOutOfPocketMaximums: {
			"familyOverallMax": {
				categories: ["outpatient", "inpatient", "drugs"],
				amount: 6000
			}
		},
		categoriesFundEligibility: {
			"outpatient": "allFunds",
			"inpatient": "allFunds",
			"drugs": "allFunds"
		},
		fundAllowsContributions: true,
		fsaeAccountTypeId: "FSA"
	}
};

//-------------------------------------------------------------------------------------------------
// plansOrder: An array defining the order in which plans are to be displayed and/or iterated
//   over. The set of plan ids here must match the set defined in config.plans.
//
config.plansOrder = ["SAMPLE_HSA1", "SAMPLE_HSA2", "SAMPLE_PPO", "SAMPLE_HMO"];

//-------------------------------------------------------------------------------------------------
// statuses: Defines the employee statuses included in the MPCE.
//
// Structure: Object mapping string status ids, each to an object containing properties as follows:
//
// - description: Required string property containing the status name suitable for display.
//
// Employee statuses are principally used to select the coverage level cost per plan.  For instance,
// full-time employees may pay a different premium than part-time employees.  See also the
// configuration for coverageLevelCostsPerPlan, in the respective subconfigs.
//
config.statuses = {
	"salaryBand1": { description: "Less than $50,000" },
	"salaryBand2": { description: "$50,001 to $90,000" },
	"salaryBand3": { description: "More than $90,000" }
};

//-------------------------------------------------------------------------------------------------
// statusesOrder: An array defining the order in which statuses are to be displayed and/or
//   iterated over. The set of status ids here must match the set defined in mainConfig.statuses.
//   statusesDefaultId permits specifying the default value for region when the tool loads.
//
config.statusesOrder = ["salaryBand1", "salaryBand2", "salaryBand3"];
config.statusesDefaultId = "salaryBand1";

//-------------------------------------------------------------------------------------------------
// coverageLevels: Defines the available coverage levels. A coverage level typically indicates
//   whether coverage is for the employee only, employee plus spouse, employee plus family, etc.
//
// Structure: Object mapping string coverage level ids, each to an object containing properties
//   as follows:
//
// - description: Required string property containing the coverage level name suitable for display.
// - spouse: Required boolean property indicating whether the coverage level includes spousal
//     coverage (true), or not (false).
// - maxNumChildren: Required number property containing the maximum number of children covered by
//     the coverage level. If no children are covered at the coverage level, set zero. If some
//     finite number of children are covered, set that number. If an unlimited number of children
//     can be covered, set Infinity -- though practically, the engine won't currently accept more
//     than 3 children.
//
// IMPORTANT NOTE: Coverage levels are selected automatically by the MPCE engine logic based on
// the presence of a spouse and/or some number of children. In order for the MPCE engine logic to
// correctly select the best coverage level (i.e. without excess coverage), the order defined by
// config.coverageLevelsOrder needs to be correct.
//
config.coverageLevels = {
	"employeeOnly": { description: "Employee only", spouse: false, maxNumChildren: 0 },
	"employeeAndSpouse": { description: "Employee + spouse/partner", spouse: true, maxNumChildren: 0 },
	"employeeAndChild": { description: "Employee + child", spouse: false, maxNumChildren: 1 },
	"employeeAndChildren": { description: "Employee + children", spouse: false, maxNumChildren: Infinity },
	"employeeAndFamily": { description: "Employee + family", spouse: true, maxNumChildren: Infinity }
};

//-------------------------------------------------------------------------------------------------
// coverageLevelsOrder: An array defining the order in which coverage levels are to be displayed
//   and/or iterated over. The set of coverage level ids here must match the set defined in
//   config.coverageLevels.
//
// IMPORTANT NOTE: The coverage levels MUST be ordered so that the number of children covered is
// strictly increasing, so that the MPCE engine's logic to select the most appropriate coverage
// level functions correctly.
//
config.coverageLevelsOrder = ["employeeOnly", "employeeAndSpouse", "employeeAndChild", "employeeAndChildren", "employeeAndFamily"];

//-------------------------------------------------------------------------------------------------
// coverageLevelCostsPerPlan: Defines the employee annual plan premium costs for each plan, by
//   region (optional), then plan coverage level, then by employee status.
//
// Structure: Object mapping string plan ids, each to an object* containing properties as follows:
//
// EITHER:
//
// (A) Where costs DO vary by region (more complex), then each plan id's object should map from
//     regionId to another object mapping coverageLevelId to another object mapping statusId to
//     a number. (Basically, there's another level for regionId.)
// (B) Where costs DON'T vary by region (simpler), then each plan id's object should map from
//     coverageLevelId to another object mapping employee statusId to a number.
//
// Note: The above models could also be mixed; for example, to provide default costs for all
// regions, yet specialize one or a few (but not all) of the regions.
//
// * A shortcut option: At any level, instead of an object value, you could use a string to refer
// to another property's value at the same level. For instance, if two plans, regions, statuses,
// or coverage levels have identical employee premiums, then instead of defining two identical
// objects, instead define one and have the other's value refer to the first by property name.
// At runtime, the config logic replaces the string with another reference to the same object.
// The other property referred to should have an object value; i.e. avoid referring to a property
// name whose value also refers to another property name, as shortcuts are not guaranteed to be
// resolved in any particular order.
//
config.coverageLevelCostsPerPlan = {
	"SAMPLE_HSA1": {
		"employeeOnly":        { "salaryBand1": 1250, "salaryBand2": 1900, "salaryBand3": 2400 },
		"employeeAndSpouse":   { "salaryBand1": 3250, "salaryBand2": 3900, "salaryBand3": 4400 },
		"employeeAndChild":    "employeeAndChildren",
		"employeeAndChildren": { "salaryBand1": 2250, "salaryBand2": 2900, "salaryBand3": 3400 },
		"employeeAndFamily":   { "salaryBand1": 4250, "salaryBand2": 4900, "salaryBand3": 5400 }
	},

	"SAMPLE_HSA2": {
		"employeeOnly":        { "salaryBand1": 1100, "salaryBand2": 1500, "salaryBand3": 2000 },
		"employeeAndSpouse":   { "salaryBand1": 3100, "salaryBand2": 3500, "salaryBand3": 4000 },
		"employeeAndChild":    "employeeAndChildren",
		"employeeAndChildren": { "salaryBand1": 2100, "salaryBand2": 2500, "salaryBand3": 3000 },
		"employeeAndFamily":   { "salaryBand1": 4100, "salaryBand2": 4500, "salaryBand3": 5000 }
	},

	"SAMPLE_PPO": {
		"employeeOnly":        { "salaryBand1": 3400, "salaryBand2": 3600, "salaryBand3": 3800 },
		"employeeAndSpouse":   { "salaryBand1": 6200, "salaryBand2": 6400, "salaryBand3": 6600 },
		"employeeAndChild":    "employeeAndChildren",
		"employeeAndChildren": { "salaryBand1": 5200, "salaryBand2": 5400, "salaryBand3": 5600 },
		"employeeAndFamily":   { "salaryBand1": 7200, "salaryBand2": 7400, "salaryBand3": 7600 }
	},

	"SAMPLE_HMO": {
		"employeeOnly":        { "salaryBand1": 3600, "salaryBand2": 3800, "salaryBand3": 4000 },
		"employeeAndSpouse":   { "salaryBand1": 6600, "salaryBand2": 6800, "salaryBand3": 7000 },
		"employeeAndChild":    "employeeAndChildren",
		"employeeAndChildren": { "salaryBand1": 5100, "salaryBand2": 5300, "salaryBand3": 5500 },
		"employeeAndFamily":   { "salaryBand1": 7600, "salaryBand2": 7800, "salaryBand3": 8000 }
	}
};

//-------------------------------------------------------------------------------------------------
// employerCoverageLevelCostsPerPlan: Defines the employer annual plan premium costs. Contents
//   can be structured following the same rules in place for coverageLevelCostsPerPlan. Set this
//   to null if the total costs feature and employer premiums are not configured.
//
config.employerCoverageLevelCostsPerPlan = {
	"SAMPLE_HSA1": {
		"employeeOnly":        { "salaryBand1": 1536, "salaryBand2": 1320, "salaryBand3": 768 },
		"employeeAndSpouse":   { "salaryBand1": 3480, "salaryBand2": 2976, "salaryBand3": 1740 },
		"employeeAndChild":    "employeeAndChildren",
		"employeeAndChildren": { "salaryBand1": 2448, "salaryBand2": 1944, "salaryBand3": 1224 },
		"employeeAndFamily":   { "salaryBand1": 5040, "salaryBand2": 4248, "salaryBand3": 2520 }
	},

	"SAMPLE_HSA2": {
		"employeeOnly":        { "salaryBand1": 1032, "salaryBand2": 1032, "salaryBand3": 516 },
		"employeeAndSpouse":   { "salaryBand1": 2280, "salaryBand2": 2280, "salaryBand3": 1140 },
		"employeeAndChild":    "employeeAndChildren",
		"employeeAndChildren": { "salaryBand1": 1584, "salaryBand2": 1464, "salaryBand3": 792 },
		"employeeAndFamily":   { "salaryBand1": 2976, "salaryBand2": 2904, "salaryBand3": 1488 }
	},

	"SAMPLE_PPO": {
		"employeeOnly":        { "salaryBand1": 3408, "salaryBand2": 3000, "salaryBand3": 1704 },
		"employeeAndSpouse":   { "salaryBand1": 6912, "salaryBand2": 5880, "salaryBand3": 3456 },
		"employeeAndChild":    "employeeAndChildren",
		"employeeAndChildren": { "salaryBand1": 5688, "salaryBand2": 4752, "salaryBand3": 2844 },
		"employeeAndFamily":   { "salaryBand1": 9264, "salaryBand2": 7608, "salaryBand3": 4632 }
	},

	"SAMPLE_HMO": {
		"employeeOnly":        { "salaryBand1": 3552, "salaryBand2": 2376, "salaryBand3": 1776 },
		"employeeAndSpouse":   { "salaryBand1": 7992, "salaryBand2": 4104, "salaryBand3": 3996 },
		"employeeAndChild":    "employeeAndChildren",
		"employeeAndChildren": { "salaryBand1": 6288, "salaryBand2": 3000, "salaryBand3": 3144 },
		"employeeAndFamily":   { "salaryBand1": 11568, "salaryBand2": 6864, "salaryBand3": 5784 }
	}
};

//-------------------------------------------------------------------------------------------------
// adjustments: Defines custom adjustment amounts used by the app. When, say, the user chooses an
//   answer from a custom adjustment dropdown, logic in the tool's clientCustom.js could adjust
//   certain values (e.g. premiums, HSA money, etc.) by amounts specified below. Positive numbers
//   are generally meant to be increases; negative numbers are generally meant to be reductions.
//
// Structure: Object mapping string adjustment ids, each to an object containing properties as
//   follows:
//
// - label: Required string property containing the adjustment name suitable for display where
//     plan provisions are described.
// - description: Optional string property containing a default detailed description for the
//     adjustment amount, where it does not vary by plan.
// - descriptionsByPlan: Optional object mapping string plan ids each to string descriptions for
//     whether/how the adjustment applies to the specific plan. If a plan id is not mentioned in
//     descriptionsByPlan, then the "description" value is used if present.
// - answersToAmount: A flexible object mapping answers and other id values to adjustment amounts.
//     The appDefault.lookUpCustomAdjustmentAmount() method can be used to look up an amount from an
//     adjustment amount object using a key path of answer value, planId, regionId, coverageLevelId,
//     and statusId, returning the most specific number found, or zero if no number is found along
//     the path. The only required component are the valid answer values at the top-most level. Each
//     answer's value could map to a number or a nested object mapping any or all of plan, region,
//     coverage level, and status ids to numbers. Special keys "otherAnswers", "otherPlans",
//     "otherRegions", "otherCoverageLevels", and "otherStatuses" can facilitate lookup of default
//     object/value lookup for ids not mentioned at the level. As with coverageLevelCostsPerPlan,
//     at any level, instead of a number or object value, you could use a string to refer to another
//     property's value at the same level.
//
config.adjustments = {
	"wellnessPremiumIncentives": {
		label: "Wellness premium rewards",
		descriptionsByPlan: {
			"SAMPLE_HSA1": "$350 employee,<br>$300 spouse/partner",
			"SAMPLE_HSA2": "$350 employee,<br>$300 spouse/partner",
			"SAMPLE_PPO": "$400 employee,<br>$350 spouse/partner",
			"SAMPLE_HMO": "$500 employee,<br>$350 spouse/partner"
		},
		answersToAmount: {
			"wellnessNone": 0,
			"wellnessEmployee": {
				"SAMPLE_HSA1": -350,
				"SAMPLE_HSA2": "SAMPLE_HSA1",
				"SAMPLE_PPO": -400,
				"SAMPLE_HMO": -500
			},
			"wellnessSpouse": {
				"SAMPLE_HSA1": -300,
				"SAMPLE_HSA2": "SAMPLE_HSA1",
				"SAMPLE_PPO": -350,
				"SAMPLE_HMO": -350
			},
			"wellnessBoth": {
				"SAMPLE_HSA1": -650,
				"SAMPLE_HSA2": "SAMPLE_HSA1",
				"SAMPLE_PPO": -750,
				"SAMPLE_HMO":-850
			}
		}
	},

	"wellnessFundIncentives": {
		label: "Wellness fund rewards",
		descriptionsByPlan: {
			"SAMPLE_HSA1": "$200 employee,<br>$200 spouse/partner",
			"SAMPLE_HSA2": "$200 employee,<br>$200 spouse/partner"
		},
		answersToAmount: {
			"wellnessNone": 0,
			"wellnessEmployee": {
				"SAMPLE_HSA1": 200,
				"SAMPLE_HSA2": "SAMPLE_HSA1"
			},
			"wellnessSpouse": "wellnessEmployee",
			"wellnessBoth": {
				"SAMPLE_HSA1": 400,
				"SAMPLE_HSA2": "SAMPLE_HSA1"
			}
		}
	},

	"tobaccoSurcharges": {
		label: "Tobacco usage annual premium surcharge",
		description: "$600 employee,<br>$600 spouse/partner",
		answersToAmount: {
			"tobaccoNone": 0,
			"tobaccoEmployee": 600,
			"tobaccoSpouse": 600,
			"tobaccoBoth": 1200
		}
	},

	"spouseSurcharges": {
		label: "Spouse/partner annual premium surcharge",
		description: "$1200",
		answersToAmount: {
			"spouseSurchargeNo": 0,
			"spouseSurchargeYes": {
				// Coverage level is being specified here to ensure the spouse surcharge is zero when no spouse is indicated.
				// Alternatively, the dropdown could be made to fall back to selecting "No" when no spouse is indicated, but
				// in some cases it may be preferable for the dropdown to remember its last state while hidden.
				"employeeOnly": 0,
				"employeeAndSpouse": 1200,
				"employeeAndChild": 0,
				"employeeAndChildren": 0,
				"employeeAndFamily": 1200
			}
		}
	}
};

//-------------------------------------------------------------------------------------------------
// adjustmentsOrder: An array defining the order in which adjustments may be displayed and/or
//   iterated over. The tool will use these keys to find all of the defined adjustments. The set
//   of adjustment ids here must match the set defined in config.adjustments. If there are no
//   adjustments defined in config.adjustments, set this to an empty array, [].
//
config.adjustmentsOrder = ["wellnessPremiumIncentives", "wellnessFundIncentives", "tobaccoSurcharges", "spouseSurcharges"];

//-------------------------------------------------------------------------------------------------
// services: Defines the services included in the MPCE. Examples of services include routine
//   physicals, drug prescriptions, etc. Users use the MPCE to model the costs of each of
//   the plans over a selected set of services.
//
// Structure: Object mapping string service ids, each to an object having properties as follows:
//
// - description: Required string property containing the service name suitable for display.
// - descriptionPlanProvisions: Optional description that, when present, is used in the plan
//     provisions table.
// - descriptionForCosts: Optional string property containing an alternate service name suitable
//     for display in the context of service cost assumptions content. If explicitly set to null,
//     the service is excluded from such content; use e.g. for additionalServices type services.
// - descriptionForUsage: Optional string property containing an alternate service name suitable
//     for display in the context of usage category assumptions content. For a plural variant, use
//     "{s}" to denote where "s" should be added when the count is zero or more than one, or when
//     necessary provide the complete plural variant after double bars; e.g. "biopsy || biopsies".
// - footnoteIndicator: Optional string property for a footnote indicating character to append to
//     the corresponding description in the detailed modeling pane and the plan provisions table.
// - footerText: Optional string property for footnote text to display below detailed modeling and
//     the plan provisions table. footnoteIndicator is automatically prepended to this text.
// - userInputServiceCountMax: Optional number which, if specified, overrides the tool default for
//     the maximum service count that can be selected by the user under detailed modeling.
// - userInputServiceCountIncrement: Optional number which, if specified, overrides the default
//     increment of 1 for the service count options available under detailed modeling.
// - defaultCost: Optional amount providing the default average cost of the service. When a
//     service's cost is identical across most or all configured regions, this is the simplest way
//     to specify the common cost amount. The costs property can override for individual regions.
// - costs: Required, if no defaultCost is provided, otherwise optional. An object property mapping
//     string region ids, each to a number representing the average cost of the service for that
//     region. If both the costs and defaultCost properties are present, costs is consulted first,
//     with defaultCost the fallback amount when a region id isn't included in the costs object.
// - [Additional custom costs objects]: Where costsObjectId was used in the definition of a plan
//     above, the service object can contain additional named costs objects, e.g. "costs_PPO_IN".
//     The structure of these additional costs object are identical to "costs", above, and also
//     treat defaultCost as a fallback amount (if present) when a region id isn't included.
// - coverage: A coverage object contains one plan coverage object per plan id. The plan coverage
//     object is usually a single object describing the copay amount and/or coinsurance percentage
//     in that plan, but in special cases it can be an array; see below*. When the plan coverage
//     object is a SINGLE object, that object can contain:
//
//     + description: In most cases, an optional string describing the plan's coverage of the service.
//         In certain cases, required, as the tool does not support automatic conversion of certain rare
//         coverage properties into an English description for plan provisions content.
//     + notCovered: An optional boolean; if true, then this service isn't covered by the plan.
//         If this is present and true, all other properties below will be summarily ignored.
//     + copay: An optional amount specified in dollars, e.g. 25.00. If undefined, disables copay
//         portion of calculation.
//     + coinsurance: An optional amount specified as a percentage, e.g. 0.10 = 10%. If undefined,
//         disables coinsurance portion of calculation.
//     + deductible: An optional string being one of "none", "beforeCopay", "afterCopay", and
//         "beforeCoinsurance". Note that "afterCopay" and "beforeCoinsurance" are synonymous, implying
//         the same position of deduction calculation in the engine. But, use whatever name is appropriate
//         for the coverage type. If undefined, the property defaults to "afterCopay"/"beforeCoinsurance".
//     + additionalPremium: An optional amount specifying an additional premium to be incurred by the
//         employee for each use of the service. Additional premiums do not reduce the cost of a service,
//         are not considered out-of-pocket costs (and so not subject to out-of-pocket maximums) and can't
//         be offset by plan savings funds. This feature is available to permit the modeling of certain
//         kinds of "on-demand" health insurance plans that some employers are now offering to employees.
//     + copayNotTowardsOOPMax: a boolean, which defaults to false if undefined. When present as true,
//         the copay amount will not count towards the out-of-pocket maximums, and even if out-of-pocket
//         maximums have been met, the copay must still be paid.
//     + copayDoesNotReduceCost: a boolean, which defaults to false if undefined. When present as true,
//         the copay amount will not reduce the cost of the service; that is, the full cost of the service
//         will be used for subsequent application of plan design such as deductibles and coinsurance. A
//         copay that does not reduce remaining cost of a service is exceptional; this is seldom required.
//     + coveredCount: a number, which defaults to Infinity if undefined. When present, any visits that
//         exceed the coveredCount will be considered not covered, but may flow to a subsequent coverage
//         object, if an array of coverage objects is being used.
//     + dollarLimit: a number, which is ignored if undefined. Can be present instead of coveredCount
//         to indicate the coverage of a service applies up to the specified dollar limit. After the
//         dollar limit, the excess will be considered not covered, but may flow to a subsequent coverage
//         object, if an array of coverage objects is being used. Note: Either coveredCount OR dollarLimit
//         (not both) can be specified on a coverage object. Also note: dollarLimit does not currently
//         support copay; it can only be used with coinsurance type coverage.
//     + coinsuranceNotTowardsOOPMax: a boolean, which defaults to false if undefined. When present as
//         true, the coinsurance amount will not count towards the out-of-pocket maximums, and even if out
//         of pocket maximums have been met, the coinsurance must still be paid.
//     + coinsuranceMinDollar: an optional number, which defaults to negative Infinity if undefined.
//     + coinsuranceMaxDollar: an optional number, which defaults to Infinity if undefined.
//     + singleUseCostMax: an optional number, which defaults to Infinity if undefined. This value
//         limits the maximum cost to the individual for a single instance of the service, whether the
//         cost arises from copay, deductible, or coinsurance or any combination thereof.
//     + combinedLimitId: an optional string, which if present also ties coverage of the service to a
//         combined reimbursement limit as defined by config.combinedLimits. If combinedLimitId is
//         present, then the coverage object should not be part of a coverage object array. Costs beyond
//         a combined reimbursement limit are always considered not covered by a plan.
//
//     * If the coverage object is an array, then it can contain multiple individual coverage objects. This
//     is to handle some special cases where a certain copay or coinsurance amount applies to the first N
//     visits, with another amount applying to the next M visits, etc. In such a case, each coverage object
//     in a coverage array will be applied in turn, to the specified coveredCount, reducing the number of
//     visits on each individual coverage object. Where the coverage object is an array, a "description"
//     property explaining the resulting effective coverage MUST be included in the first contained object,
//     since built-in translation of coverage properties to assumption text doesn't handle the array case.
//
config.services = {
	//------------------------------
	// outpatient services
	//------------------------------

	"routinePhysical": {
		description: "Routine physical / GYN exam",
		descriptionForUsage: "routine physical{s}",
		defaultCost: 189,
		coverage: {
			"SAMPLE_HSA1": { copay: 0, deductible: "none" },
			"SAMPLE_HSA2": { copay: 0, deductible: "none" },
			"SAMPLE_PPO": { copay: 0, deductible: "none" },
			"SAMPLE_HMO": { copay: 0, deductible: "none" }
		}
	},

	"primaryCarePhysician": {
		description: "Diagnosis / treatment office visit",
		descriptionForUsage: "PCP office visit{s}",
		defaultCost: 204,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { copay: 20, deductible: "none" }
		}
	},

	"behavioralHealthOfficeVisit": {
		description: "Behavioral health office visit",
		descriptionForUsage: "behavioral health office visit{s}",
		defaultCost: 209,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { copay: 30, deductible: "none" }
		}
	},

	"specialistOfficeVisit": {
		description: "Specialist office visit (minor problems)",
		descriptionForUsage: "specialist office visit{s}",
		defaultCost: 161,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { copay: 30, deductible: "none" }
		}
	},

	"bloodTest": {
		description: "Blood test",
		descriptionForUsage: "blood test{s}",
		defaultCost: 25,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { copay: 0, deductible: "none" }
		}
	},

	"xray": {
		description: "X-ray",
		descriptionForUsage: "X-ray{s}",
		defaultCost: 133,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { copay: 0, deductible: "none" }
		}
	},

	"colonoscopy": {
		description: "Colonoscopy",
		descriptionForUsage: "colonoscopy || colonoscopies",
		defaultCost: 1417,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { coinsurance: 0.20 }
		}
	},

	"mammogram": {
		description: "Mammogram",
		descriptionForUsage: "mammogram{s}",
		defaultCost: 406,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { coinsurance: 0.20 }
		}
	},

	"emergencyRoomVisit": {
		description: "Emergency room visit",
		descriptionForUsage: "emergency room visit{s}",
		defaultCost: 2416,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { coinsurance: 0.20 }
		}
	},

	"mriScan": {
		description: "MRI scan",
		descriptionForUsage: "MRI scan{s}",
		defaultCost: 1221,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { coinsurance: 0.20 }
		}
	},

	"outpatientSurgery": {
		description: "Outpatient surgery",
		descriptionForUsage: "outpatient surgery || outpatient surgeries",
		defaultCost: 5101,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { coinsurance: 0.20 }
		}
	},

	// OPTIONAL: Services with ids starting w/"additionalService" and defaultCost: 1.0 show as dollar-value dropdowns in detailed modeling.
	// This example also shows how to include a footnote for a service that will display in detailed modeling and the plan provisions table.
	//
	// "additionalServicesOutpatient": {
	// 	description: "Other covered services &mdash;<br>specified as a dollar amount",
	// 	descriptionForCosts: null, // exclude this item from costs assumptions content
	// 	descriptionForUsage: "in other covered outpatient services not specifically listed",
	// 	descriptionPlanProvisions: "Other covered outpatient services not specifically listed above",
	// 	footnoteIndicator: "&dagger;",
	// 	footnoteText: "Dollar amounts specified for other covered services must be the allowed charge before any deductible and coinsurance.",
	// 	defaultCost: 1.0,
	// 	userInputServiceCountMax: 10000,
	// 	userInputServiceCountIncrement: 200,
	// 	coverage: {
	// 		"SAMPLE_HSA1": { coinsurance: 0.20 },
	// 		"SAMPLE_HSA2": { coinsurance: 0.20 },
	// 		"SAMPLE_PPO": { coinsurance: 0.20 },
	// 		"SAMPLE_HMO": { coinsurance: 0.20 }
	// 	}
	// },

	//------------------------------
	// inpatient services
	//------------------------------

	"maternityVaginalDelivery": {
		description: "Maternity - vaginal delivery",
		descriptionForUsage: "Maternity - vaginal delivery || Maternity - vaginal deliveries",
		defaultCost: 16626,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { coinsurance: 0.20 }
		}
	},

	"maternityCesareanDelivery": {
		description: "Maternity - Cesarean delivery",
		descriptionForUsage: "Maternity - Cesarean delivery || Maternity - Cesarean deliveries",
		defaultCost: 22937,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { coinsurance: 0.20 }
		}
	},

	"twoDayInpatientStay": {
		description: "Other two-day inpatient stay",
		descriptionForUsage: "two-day inpatient stay{s}",
		defaultCost: 21871,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20 },
			"SAMPLE_HSA2": { coinsurance: 0.20 },
			"SAMPLE_PPO": { coinsurance: 0.20 },
			"SAMPLE_HMO": { coinsurance: 0.20 }
		}
	},

	//------------------------------
	// drug services (regular)
	//------------------------------

	"drugsRetailGeneric30Days": {
		description: "Retail - generic (30-day supply)",
		descriptionForCosts: "Retail - generic prescription (30-day supply)",
		descriptionForUsage: "retail generic prescription{s} (30-day supply each)",
		descriptionPlanProvisions: "Retail - generic prescription (30-day supply)",
		defaultCost: 22,
		coverage: {
			"SAMPLE_HSA1": { copay: 5, deductible: "none" },
			"SAMPLE_HSA2": { copay: 5, deductible: "none" },
			"SAMPLE_PPO": { copay: 5, deductible: "none" },
			"SAMPLE_HMO": { copay: 5, deductible: "none" }
		}
	},

	"drugsRetailPref30Days": {
		description: "Retail - preferred brand (30-day supply)",
		descriptionForCosts: "Retail - preferred brand name prescription (30-day supply)",
		descriptionForUsage: "retail preferred brand name prescription{s} (30-day supply each)",
		descriptionPlanProvisions: "Retail - preferred brand name prescription (30-day supply)",
		defaultCost: 1011,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20, deductible: "beforeCoinsurance" },
			"SAMPLE_HSA2": { coinsurance: 0.20, deductible: "beforeCoinsurance" },
			"SAMPLE_PPO": { coinsurance: 0.20, deductible: "none" },
			"SAMPLE_HMO": { coinsurance: 0.20, deductible: "none" }
		}
	},

	"drugsMailGeneric90Days": {
		description: "Mail order - generic (90-day supply)",
		descriptionForCosts: "Mail order - generic prescription (90-day supply)",
		descriptionForUsage: "mail order generic prescription{s} (90-day supply each)",
		descriptionPlanProvisions: "Mail order - generic prescription (90-day supply)",
		defaultCost: 85,
		coverage: {
			"SAMPLE_HSA1": { copay: 15, deductible: "none" },
			"SAMPLE_HSA2": { copay: 15, deductible: "none" },
			"SAMPLE_PPO": { copay: 15, deductible: "none" },
			"SAMPLE_HMO": { copay: 15, deductible: "none" }
		}
	},

	"drugsMailPref90Days": {
		description: "Mail order - preferred brand (90-day supply)",
		descriptionForCosts: "Mail order - preferred brand name prescription (90-day supply)",
		descriptionForUsage: "mail order preferred brand name prescription{s} (90-day supply each)",
		descriptionPlanProvisions: "Mail order - preferred brand name prescription (90-day supply)",
		defaultCost: 5680,
		coverage: {
			"SAMPLE_HSA1": { coinsurance: 0.20, deductible: "beforeCoinsurance", singleUseCostMax: 300 },
			"SAMPLE_HSA2": { coinsurance: 0.20, deductible: "beforeCoinsurance", singleUseCostMax: 300 },
			"SAMPLE_PPO": { coinsurance: 0.20, deductible: "none", singleUseCostMax: 300 },
			"SAMPLE_HMO": { coinsurance: 0.20, deductible: "none", singleUseCostMax: 300 }
		}
	}
};

//-------------------------------------------------------------------------------------------------
// combinedLimits: An optional object defining combined reimbursement limits. A combined
//   reimbursement limit sets a maximum dollar amount that can be reimbursed for a combination of
//   services, either per person, per family, or both. The service coverage objects that are
//   related to a single combined reimbursement limit should refer to the same combinedLimitId.
//
// Structure: Object mapping combined limit ids, each to an object containing properties as follows:
//
// - personReimburseLimit: Optional maximum dollar amount that will be reimbursed by the plan, per
//     person, for the set of services tied to the combined limit.
// - familyReimburseLimit: Optional maximum dollar amount that will be reimbursed by the plan, per
//     family, for the set of services tied to the combined limit.
//
// Note: It is possible to use either reimburse limit above alone or in conjunction. For instance,
// you could, say, restrict a given service to $300 per person and a total of $750 per family.
//
config.combinedLimits = {};

//-------------------------------------------------------------------------------------------------
// categories: Categories exist both to provide a way to group services for display, as well as
//   to customize certain MPCE calculation behaviour -- e.g. fund amounts, deductible, and
//   out-of-pocket maximums on a category basis.
//
// Structure: Object mapping category ids, each to an object containing properties as follows:
//
// - description: Required string property containing the category name suitable for display.
// - orderedContents: Required array containing service ids, in the order suitable for display
//     and to be iterated over. Each of the services ids referred to must be defined in
//     config.services. Every service id must appear in one and only one category.
//
config.categories = {
	"outpatient": {
		description: "Medical &ndash; Outpatient",
		orderedContents: [
			"routinePhysical",
			"primaryCarePhysician",
			"behavioralHealthOfficeVisit",
			"specialistOfficeVisit",
			"bloodTest",
			"xray",
			"colonoscopy",
			"mammogram",
			"emergencyRoomVisit",
			"mriScan",
			"outpatientSurgery"
		]
	},

	"inpatient": {
		description: "Medical &ndash; Inpatient",
		orderedContents: [
			"maternityVaginalDelivery",
			"maternityCesareanDelivery",
			"twoDayInpatientStay"
		]
	},

	"drugs": {
		description: "Prescription Drugs",
		orderedContents: [
			"drugsRetailGeneric30Days",
			"drugsRetailPref30Days",
			"drugsMailGeneric90Days",
			"drugsMailPref90Days"
		]
	}
};

//-------------------------------------------------------------------------------------------------
// categoriesOrder: An array defining the order in which categories are to be displayed and/or
//   iterated over. The set of category ids here must match the set defined in config.categories.
//
config.categoriesOrder = ["outpatient", "inpatient", "drugs"];

//-------------------------------------------------------------------------------------------------
// usageCategories: Usage categories are optional groupings of different health care services and
//   counts. Essentially, a usage category provides a shortcut way for a user to select a group of
//   services for estimation based on simple criteria like low/moderate/high -- although category
//   options do not necessarily necessarily need to be defined on a frequency spectrum.
//
// Structure: Object mapping usage category ids, each to an object containing properties as follows:
//
// - name: Short description for the usage category, displayed by tool when compactness needed.
// - description: Description displayed by tool when compactness is not needed.
// - optionsOrder: An array defining the order for displaying the usage category's options.
// - simplifiedModelingOptionsOrder: An optional array defining the order for displaying the usage
//     category's options in simplified modeling. Must be a subset of optionsOrder. If not present,
//     defaults to the same contents as optionsOrder.
// - simplifiedModelingDefault: An optional string defining which option is the default for this
//     usage category. If not present, defaults to first value in simplifiedModelingOptionsOrder.
// - detailedModelingOptionsOrder: Like simplifiedModelingOptionsOrder, but for detailed modeling.
// - detailedModelingDefault: Like simplifiedModelingDefault, but for detailed modeling.
// - options: Object mapping usage category option ids to objects, each with properties as follows:
//     - description: The description for the option to display in the tool.
//     - contents: Required object mapping individual service ids to a service count.
//         Each of the service ids referred to must be defined in config.services.
// - disabled: Whether or not the usage category is disabled. Disabled usage categories will not
//     appear in the tool. This is primarily to facilitate excluding the standard single set when
//     enabling multiple usage categories.
//
config.usageCategories = {
	// NOTE 1: The default for the MPCE is to provide two distinct usage categories: medical services,
	// and drug services. This allows the user to increase prescription usage while keeping the medical
	// usage at the same level. If a single overall usage category is desired instead, then:
	//    (1) rename "medical" below to "general", and also in config.usageCategoriesOrder, and
	//    (2) merge in the services under "drugs" from the options "low", "moderate", and "high", and
	//    (3) delete the "drugs" object below and its mention from config.usageCategoriesOrder.

	// NOTE 2: The "lowModerate" and "moderateHigh" usage levels used only by the personas model are
	// conditionally added by mainConfig calling config.addPersonasModelExtraUsageCategories(), which
	// is defined further below. Client sites not using the personas model can remove that code.

	"medical": {
		name: "Medical",
		description: "Medical usage",
		optionsOrder: ["none", "low", "moderate", "high"],
		simplifiedModelingDefault: "low",
		detailedModelingDefault: "none",

		options: {
			"none": {
				description: "None",
				contents: {}
			},

			"low": {
				description: "Low",
				contents: {
					"routinePhysical": 1,
					"primaryCarePhysician": 2,
					"bloodTest": 1
				}
			},

			"moderate": {
				description: "Moderate",
				contents: {
					"routinePhysical": 1,
					"primaryCarePhysician": 3,
					"specialistOfficeVisit": 2,
					"bloodTest": 3,
					"xray": 1,
					"emergencyRoomVisit": 1
				}
			},

			"high": {
				description: "High",
				contents: {
					"routinePhysical": 1,
					"primaryCarePhysician": 6,
					"specialistOfficeVisit": 7,
					"bloodTest": 10,
					"xray": 1,
					"emergencyRoomVisit": 1,
					"mriScan": 1,
					"twoDayInpatientStay": 1
				}
			}
		}
	},

	"drugs": {
		name: "Prescription",
		description: "Prescription usage",
		optionsOrder: ["none", "low", "moderate", "high"],
		simplifiedModelingDefault: "low",
		detailedModelingDefault: "none",

		options: {
			"none": {
				description: "None",
				contents: {}
			},

			"low": {
				description: "Low",
				contents: {
					"drugsRetailGeneric30Days": 2
				}
			},

			"moderate": {
				description: "Moderate",
				contents: {
					"drugsRetailGeneric30Days": 2,
					"drugsRetailPref30Days": 2,
					"drugsMailPref90Days": 2
				}
			},

			"high": {
				description: "High",
				contents: {
					"drugsRetailGeneric30Days": 8,
					"drugsRetailPref30Days": 4,
					"drugsMailPref90Days": 4
				}
			}
		}
	}
};

// The additional usage categories lowModerate and moderateHigh are used only by the personas model.
config.addPersonasModelExtraUsageCategories = function addPersonasModelExtraUsageCategories() {
	let medical = config.usageCategories["medical"], drugs = config.usageCategories["drugs"];
	// Add lowModerate and moderateHigh to usage category "medical"
	medical.options["lowModerate"] = {
		description: "Low/Moderate",
		contents: {
			"routinePhysical": 1,
			"primaryCarePhysician": 2,
			"bloodTest": 2,
			"specialistOfficeVisit": 4
		}
	};
	medical.options["moderateHigh"] = {
		description: "Moderate/High",
		contents: {
			"routinePhysical": 1,
			"primaryCarePhysician": 4,
			"specialistOfficeVisit": 88,
			"bloodTest": 3
		}
	};
	medical.optionsOrder = ["none", "low", "lowModerate", "moderate", "moderateHigh", "high"];
	// Add lowModerate and moderateHigh to usage category "drugs"
	drugs.options["lowModerate"] = {
		description: "Low/Moderate",
		contents: {
			"drugsRetailGeneric30Days": 2,
			"drugsMailGeneric90Days": 4
		}
	};
	drugs.options["moderateHigh"] = {
		description: "Moderate/High",
		contents: {
			"drugsMailGeneric90Days": 4,
			"drugsMailPref90Days": 4
		}
	};
	drugs.optionsOrder = ["none", "low", "lowModerate", "moderate", "moderateHigh", "high"];
};

//-------------------------------------------------------------------------------------------------
// usageCategoriesOrder: An array defining the order in which usage categories are to be displayed
//   and/or iterated over. The set of usage category ids here must match the set defined in
//   config.usageCategories. The effective set used in the tool is the subset of those below that
//   don't have disabled set to true in config.usageCategories.
//
config.usageCategoriesOrder = ["medical", "drugs"];

return config; // important!
}); // important!
